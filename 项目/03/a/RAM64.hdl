// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=true, sel[0]=address[3],sel[1]=address[4],sel[2]=address[5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    And(a=load, b=a, out=a1);
    And(a=load, b=b, out=b1);
    And(a=load, b=c, out=c1);
    And(a=load, b=d, out=d1);
    And(a=load, b=e, out=e1);
    And(a=load, b=f, out=f1);
    And(a=load, b=g, out=g1);
    And(a=load, b=h, out=h1);

    RAM8(in=in, load=a1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R1);
    RAM8(in=in, load=b1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R2);
    RAM8(in=in, load=c1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R3);
    RAM8(in=in, load=d1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R4);
    RAM8(in=in, load=e1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R5);
    RAM8(in=in, load=f1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R6);
    RAM8(in=in, load=g1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R7);
    RAM8(in=in, load=h1, address[0]=address[0],address[1]=address[1],address[2]=address[2], out=R8);
    
    Mux8Way16(a=R1, b=R2, c=R3, d=R4, e=R5, f=R6, g=R7, h=R8, sel[0]=address[3],sel[1]=address[4],sel[2]=address[5], out=out);

}